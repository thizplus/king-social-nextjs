// services/userService.ts

import apiService from './apiService';
import { USER_API } from '@/constants/api';
import type {
  ApiResponse,
  BackendPaginationParams,
  PaginatedResponse
} from '@/types/common';
import type {
  UpdateUserRequest,
  // EnhancedProfileUpdateRequest // Commented out unused import
} from '@/types/request/user';
import type {
  // UserResponse, // Commented out unused import
  // UserListResponse, // Commented out unused import
  EnhancedProfileResponse,
  EnhancedUserListResponse
} from '@/types/response/user';

/**
 * Enhanced User Service
 * ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Enhanced Profile ‡∏û‡∏£‡πâ‡∏≠‡∏° Social Features
 *
 * ‚ú® Enhanced Features:
 * - ‚úÖ Enhanced Profile Management (GET, PUT, DELETE)
 * - ‚úÖ Social Features (isFollowing, isFollowedBy, stats)
 * - ‚úÖ Privacy Controls (isPrivate, isVerified)
 * - ‚úÖ Rich Profile Data (bio, website, displayName)
 * - ‚úÖ Real-time Stats (topics, videos, followers, following)
 * - ‚úÖ Admin Enhanced User Listing (GET with pagination)
 * - ‚úÖ Type Safety with TypeScript
 * - ‚úÖ Comprehensive Error Handling
 * - ‚úÖ Authentication via interceptors
 *
 * üîÑ Data Format Changes:
 * - displayName ‡πÅ‡∏ó‡∏ô firstName + lastName ‡πÉ‡∏ô public responses
 * - stats object ‡πÅ‡∏¢‡∏Å topics ‡πÅ‡∏•‡∏∞ videos ‡πÅ‡∏ó‡∏ô posts
 * - ‡πÄ‡∏û‡∏¥‡πà‡∏° bio, website, isVerified, isPrivate
 * - ‡πÄ‡∏û‡∏¥‡πà‡∏° isFollowing, isFollowedBy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö social features
 * - Admin responses ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô, User responses ‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• public
 *
 * üìã Validation Rules (Enhanced):
 * - firstName: optional, 1-50 characters
 * - lastName: optional, 1-50 characters
 * - avatar: optional, valid URL, max 500 characters
 * - bio: optional, max 500 characters ‚ú® NEW
 * - website: optional, valid URL, max 255 characters ‚ú® NEW
 * - isPrivate: optional, boolean ‚ú® NEW
 */

const userService = {
  // ===========================================
  // üîí PROTECTED ENDPOINTS (Authenticated Users)
  // ===========================================

  /**
   * üìñ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Enhanced Profile ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
   *
   * @returns Promise<ApiResponse<EnhancedProfileResponse>>
   *
   * @example
   * ```typescript
   * try {
   *   const response = await userService.getProfile();
   *   if (response.success) {
   *     console.log('Enhanced profile:', response.data);
   *     console.log('Display name:', response.data.displayName);
   *     console.log('Stats:', response.data.stats);
   *     console.log('Is verified:', response.data.isVerified);
   *     console.log('Is private:', response.data.isPrivate);
   *   }
   * } catch (error) {
   *   console.error('Failed to get profile:', error);
   * }
   * ```
   */
  getProfile: async (): Promise<ApiResponse<EnhancedProfileResponse>> => {
    return await apiService.get<ApiResponse<EnhancedProfileResponse>>(USER_API.PROFILE);
  },

  /**
   * ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Enhanced Profile ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
   *
   * @param data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (Enhanced Format)
   * @returns Promise<ApiResponse<EnhancedProfileResponse>>
   *
   * @example
   * ```typescript
   * try {
   *   const updateData = {
   *     firstName: 'John Updated',
   *     lastName: 'Doe Updated',
   *     avatar: 'https://example.com/new-avatar.jpg',
   *     bio: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ bio ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏°',
   *     website: 'https://mywebsite.com',
   *     isPrivate: false
   *   };
   *
   *   const response = await userService.updateProfile(updateData);
   *   if (response.success) {
   *     console.log('Enhanced profile updated:', response.data);
   *     console.log('New display name:', response.data.displayName);
   *     console.log('New bio:', response.data.bio);
   *     console.log('Privacy setting:', response.data.isPrivate);
   *   }
   * } catch (error) {
   *   if (error.errors) {
   *     // Validation errors
   *     console.error('Validation errors:', error.errors);
   *   } else {
   *     console.error('Update failed:', error.message);
   *   }
   * }
   * ```
   */
  updateProfile: async (data: UpdateUserRequest): Promise<ApiResponse<EnhancedProfileResponse>> => {
    return await apiService.put<ApiResponse<EnhancedProfileResponse>>(USER_API.UPDATE_PROFILE, data);
  },

  /**
   * üóëÔ∏è ‡∏•‡∏ö Account ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
   *
   * @returns Promise<ApiResponse<null>>
   *
   * ‚ö†Ô∏è **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏**: ‡∏Å‡∏≤‡∏£‡∏•‡∏ö account ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   *
   * @example
   * ```typescript
   * try {
   *   const response = await userService.deleteProfile();
   *   if (response.success) {
   *     console.log('Account deleted successfully');
   *     // Redirect to home or login page
   *     window.location.href = '/';
   *   }
   * } catch (error) {
   *   if (error.error === 'cannot delete user with active content') {
   *     console.error('Cannot delete account with active content');
   *   } else {
   *     console.error('Delete failed:', error.message);
   *   }
   * }
   * ```
   */
  deleteProfile: async (): Promise<ApiResponse<null>> => {
    return await apiService.delete<ApiResponse<null>>(USER_API.DELETE_PROFILE);
  },

  // ===========================================
  // üîê ADMIN ONLY ENDPOINTS
  // ===========================================

  /**
   * üìã ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Enhanced Format (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
   *
   * @param params - ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
   * @returns Promise<PaginatedResponse<EnhancedUserListResponse>>
   *
   * @example
   * ```typescript
   * try {
   *   // ‡∏î‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å 20 records
   *   const response = await userService.getUsers({
   *     offset: 0,
   *     limit: 20
   *   });
   *
   *   if (response.success) {
   *     console.log('Enhanced users:', response.data.users);
   *     response.data.users.forEach(user => {
   *       console.log(`${user.username}: ${user.stats.topics} topics, ${user.stats.videos} videos`);
   *       console.log(`Verified: ${user.isVerified}, Private: ${user.isPrivate}`);
   *       console.log(`Bio: ${user.bio}, Website: ${user.website}`);
   *     });
   *     console.log('Total:', response.meta.total);
   *     console.log('Has next page:', response.meta.hasNext);
   *   }
   * } catch (error) {
   *   if (error.status === 403) {
   *     console.error('Admin access required');
   *   } else {
   *     console.error('Failed to get users:', error.message);
   *   }
   * }
   * ```
   */
  getUsers: async (params?: BackendPaginationParams): Promise<PaginatedResponse<EnhancedUserListResponse>> => {
    const queryParams = {
      offset: params?.offset ?? 0,
      limit: params?.limit ?? 10
    };

    return await apiService.get<PaginatedResponse<EnhancedUserListResponse>>(
      USER_API.LIST,
      queryParams
    );
  },

  // ===========================================
  // üõ†Ô∏è UTILITY METHODS
  // ===========================================

  /**
   * üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Enhanced Profile ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
   *
   * @returns Promise<ApiResponse<EnhancedProfileResponse>>
   *
   * @example
   * ```typescript
   * // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   * await userService.updateProfile(updateData);
   *
   * // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
   * const refreshedProfile = await userService.refreshProfile();
   * console.log('Refreshed stats:', refreshedProfile.data.stats);
   * ```
   */
  refreshProfile: async (): Promise<ApiResponse<EnhancedProfileResponse>> => {
    return await userService.getProfile();
  },

  /**
   * üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Enhanced Profile ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   *
   * @returns Promise<boolean> - true ‡∏ñ‡πâ‡∏≤ profile ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà private ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô owner
   *
   * @example
   * ```typescript
   * const isValid = await userService.validateProfile();
   * if (!isValid) {
   *   // Redirect to login or show error
   * }
   * ```
   */
  validateProfile: async (): Promise<boolean> => {
    try {
      const response = await userService.getProfile();
      return response.success && response.data !== undefined;
    } catch {
      return false;
    }
  },

  /**
   * üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏á‡∏Ñ‡∏°
   *
   * @returns Promise<{stats: UserStats, social: {following: boolean, followedBy: boolean}} | null>
   *
   * @example
   * ```typescript
   * const socialInfo = await userService.getSocialInfo();
   * if (socialInfo) {
   *   console.log('Topics:', socialInfo.stats.topics);
   *   console.log('Videos:', socialInfo.stats.videos);
   *   console.log('Following this user:', socialInfo.social.following);
   * }
   * ```
   */
  getSocialInfo: async (): Promise<{
    stats: { topics: number; videos: number; followers: number; following: number };
    social: { following: boolean; followedBy: boolean };
  } | null> => {
    try {
      const response = await userService.getProfile();
      if (response.success && response.data) {
        return {
          stats: response.data.stats,
          social: {
            following: response.data.isFollowing,
            followedBy: response.data.isFollowedBy
          }
        };
      }
      return null;
    } catch {
      return null;
    }
  },

  /**
   * üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin User List ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
   *
   * @param offset - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
   * @param limit - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
   * @returns string - URL ‡∏û‡∏£‡πâ‡∏≠‡∏° query parameters
   *
   * @example
   * ```typescript
   * const url = userService.buildUserListUrl(20, 10);
   * // Result: '/users/?offset=20&limit=10'
   * ```
   */
  buildUserListUrl: (offset: number = 0, limit: number = 10): string => {
    const params = new URLSearchParams({
      offset: offset.toString(),
      limit: limit.toString()
    });
    return `${USER_API.LIST}?${params.toString()}`;
  },

  // ===========================================
  // üîß ENHANCED VALIDATION & HELPER METHODS
  // ===========================================

  /**
   * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profile ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
   *
   * @param data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns {isValid: boolean, errors: string[]}
   *
   * @example
   * ```typescript
   * const updateData = {
   *   bio: 'Very long bio that exceeds 500 characters...',
   *   website: 'invalid-url',
   *   firstName: ''
   * };
   *
   * const validation = userService.validateProfileData(updateData);
   * if (!validation.isValid) {
   *   console.error('Validation errors:', validation.errors);
   * }
   * ```
   */
  validateProfileData: (data: UpdateUserRequest): { isValid: boolean; errors: string[] } => {
    const errors: string[] = [];

    // firstName validation
    if (data.firstName !== undefined) {
      if (data.firstName.length === 0 || data.firstName.length > 50) {
        errors.push('firstName must be between 1 and 50 characters');
      }
    }

    // lastName validation
    if (data.lastName !== undefined) {
      if (data.lastName.length === 0 || data.lastName.length > 50) {
        errors.push('lastName must be between 1 and 50 characters');
      }
    }

    // avatar validation
    if (data.avatar !== undefined) {
      try {
        new URL(data.avatar);
        if (data.avatar.length > 500) {
          errors.push('avatar URL must not exceed 500 characters');
        }
      } catch {
        errors.push('avatar must be a valid URL');
      }
    }

    // bio validation (NEW)
    if (data.bio !== undefined) {
      if (data.bio.length > 500) {
        errors.push('bio must not exceed 500 characters');
      }
    }

    // website validation (NEW)
    if (data.website !== undefined) {
      try {
        new URL(data.website);
        if (data.website.length > 255) {
          errors.push('website URL must not exceed 255 characters');
        }
      } catch {
        errors.push('website must be a valid URL');
      }
    }

    // isPrivate validation (NEW)
    if (data.isPrivate !== undefined) {
      if (typeof data.isPrivate !== 'boolean') {
        errors.push('isPrivate must be a boolean value');
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  },

  /**
   * üè∑Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á displayName ‡∏à‡∏≤‡∏Å firstName ‡πÅ‡∏•‡∏∞ lastName
   *
   * @param firstName - ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
   * @param lastName - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
   * @param username - username (fallback)
   * @returns string - displayName ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
   *
   * @example
   * ```typescript
   * const displayName = userService.createDisplayName('John', 'Doe', 'johndoe');
   * // Result: 'John Doe'
   *
   * const displayName2 = userService.createDisplayName('', '', 'johndoe');
   * // Result: 'johndoe'
   * ```
   */
  createDisplayName: (firstName?: string, lastName?: string, username?: string): string => {
    const first = firstName?.trim() || '';
    const last = lastName?.trim() || '';

    if (first && last) {
      return `${first} ${last}`;
    } else if (first) {
      return first;
    } else if (last) {
      return last;
    } else {
      return username || 'Anonymous';
    }
  },

  /**
   * üìà ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á Profile
   *
   * @param profile - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Enhanced Profile
   * @returns number - ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (0-100)
   *
   * @example
   * ```typescript
   * const profile = await userService.getProfile();
   * if (profile.success) {
   *   const completion = userService.calculateProfileCompletion(profile.data);
   *   console.log(`Profile is ${completion}% complete`);
   * }
   * ```
   */
  calculateProfileCompletion: (profile: EnhancedProfileResponse): number => {
    const fields = [
      profile.displayName,
      profile.avatar,
      profile.bio,
      profile.website
    ];

    const completedFields = fields.filter(field => field && field.trim().length > 0).length;
    return Math.round((completedFields / fields.length) * 100);
  },

  /**
   * üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô UI
   *
   * @param profile - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Enhanced Profile
   * @returns object - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI
   *
   * @example
   * ```typescript
   * const profile = await userService.getProfile();
   * if (profile.success) {
   *   const uiData = userService.formatForUI(profile.data);
   *   console.log('UI Data:', uiData);
   * }
   * ```
   */
  formatForUI: (profile: EnhancedProfileResponse) => {
    return {
      // Basic info
      id: profile.id,
      username: profile.username,
      displayName: profile.displayName,
      avatar: profile.avatar || '/default-avatar.png',

      // Enhanced info
      bio: profile.bio || 'No bio yet',
      website: profile.website,
      hasWebsite: !!profile.website,

      // Status
      isVerified: profile.isVerified,
      isPrivate: profile.isPrivate,

      // Stats
      stats: {
        topics: profile.stats.topics || 0,
        videos: profile.stats.videos || 0,
        followers: profile.stats.followers || 0,
        following: profile.stats.following || 0,
        totalContent: (profile.stats.topics || 0) + (profile.stats.videos || 0)
      },

      // Social
      social: {
        isFollowing: profile.isFollowing,
        isFollowedBy: profile.isFollowedBy,
        connectionStatus: profile.isFollowing && profile.isFollowedBy ? 'mutual' :
                         profile.isFollowing ? 'following' :
                         profile.isFollowedBy ? 'follower' : 'none'
      },

      // Meta
      profileCompletion: userService.calculateProfileCompletion(profile),
      joinedDate: new Date(profile.createdAt).toLocaleDateString('th-TH'),
      lastUpdated: new Date(profile.updatedAt).toLocaleDateString('th-TH')
    };
  }
};

export default userService;